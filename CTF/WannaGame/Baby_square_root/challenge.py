from Crypto.Util.number import bytes_to_long, getPrime
from secret import flag

m = bytes_to_long(flag)

def genkey(nbits):
    while True:
        p, q, r = [getPrime(nbits) for _ in range(3)]
        if (p % 4 == 3) and (q % 4 == 3) and (r % 4 == 3):
            if (m % p)**2 > p and (m % p)**2 > q and (m % r)**2 > r:
                return p, q, r

p, q, r = genkey(256)
print("p = %d" % p)
print("q = %d" % q)
print("r = %d" % r)        
n = p * q * r
assert m * m > n
c = pow(m, 2, n)
print("c = %d" % c)
# p = 70983802669936779583888271861264418553792693554114299680738628616089490185419
# q = 58305592279975890783353046164122693676607057964958376141731197322666598532103
# r = 97916428487890361773100867250333330323792113286852927362830936108809145675571
# c = 133577637589652723069183361093768415945855108781724437021455876659182394384174818367149957719648205506911291215264096735072761818791817528925431287027255773272638623023278085524784625145794560351502585907066260712268740708335604444
